version: '0.2.0'
services:
  persistence:
    image: persistence:latest
    hostname: persistence
    build: ./persistence
    ports:
      - 3306:3306
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    env_file:
      - .env
    ports:
      - ${ZOOKEEPER_CLIENT_PORT}:${ZOOKEEPER_CLIENT_PORT}

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_BROKER_PORT}:${KAFKA_BROKER_PORT}
    env_file:
      - .env
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://${KAFKA_BROKER}:${KAFKA_BROKER_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  init_kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:${KAFKA_BROKER_PORT} --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:${KAFKA_BROKER_PORT} --create --if-not-exists --topic ${TOPIC_INSERT} --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:${KAFKA_BROKER_PORT} --create --if-not-exists --topic ${TOPIC_UPDATE} --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:${KAFKA_BROKER_PORT} --create --if-not-exists --topic ${TOPIC_DELETE} --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:${KAFKA_BROKER_PORT} --list
      "

  producer:
    image: producer:latest
    hostname: producer
    build: ./producer
    depends_on:
      init_kafka:
        condition: service_completed_successfully
      persistence:
          condition: service_healthy
    env_file:
      - .env

  consumer:
    image: consumer:latest
    hostname: consumer
    build: ./consumer
    depends_on:
      init_kafka:
        condition: service_completed_successfully
      persistence:
          condition: service_healthy
    env_file:
      - .env